---
title: IgProf, The Ignominous Profiler
layout: default
related:
 - { name: Top, link: . }
 - { name: Downloads, link: http://sourceforge.net/projects/igprof/files/ }
 - { name: Bugs, link: http://sourceforge.net/tracker/?group_id=300286&atid=1266520 }
 - { name: Project, link: http://sourceforge.net/projects/igprof/ }
---
Welcome to IgProf, the Ignominous Profiler.  IgProf is a simple nice tool for
measuring and analysing application memory and performance characteristics.
IgProf requires no changes to the application or the build process.  It
currently works on Linux (ia32, x86_64).  Eons ago it worked also on Mac OS X (PPC).

Few profilers are capable of correctly profiling CMS' C++ software.  IgProf is
a fast, light weight and correctly handles dynamically loaded shared libraries,
threads and sub-processes started by the application.  It requires no special
privileges to run.  The performance reports can be customised by applying
filters and may include results from any number of profiling runs.  This means
you can both dig into the details and see the big picture from combined
workloads.

The performance profiling adds negligbly to application run time and ~40 MB to
memory usage.  The memory profiling overhead depends heavily on the application's
memory allocation patterns: the smaller allocations and the higher the rate, the
more overhead.  For a fairly typical CMSSW task on 64-bit Scientific Linux 5,
loading some 600 shared libraries, using 1 GB memory and allocating at roughly
million allocations per second rate averaged over an hour or so, the run time
overhead is ~250% and memory use increase ~1 GB. On 32-bit Linux the overhead
is much less, about ~50% increase in run time, in some cases as little as 15%.
Usually IgProf is considerably faster than valgrind or callgrind for the job.

### Other profilers

If developing on a Mac OS X is an option, even if you otherwise develop on Linux, consider using [Shark][].  For very precise but much more expensive profiling you can use [callgrind and valgrind][].  [OProfile][] is another statistical profiler that uses CPU performance counters; it requires system privileges unless you use the snapshot interface developed by Giulio Eulisse.  At present OProfile gives only flat profiles, not call trees, but allows a wide range of very interesting metrics to measure, such as cache miss rate.  It can also profile the whole system, not just one application.  CMSSW includes a builtin SimpleProfiler you may wish to try.

[Shark]: http://developer.apple.com/tools/sharkoptimize.html
[callgrind and valgrind]: http://www.valgrind.org
[oprofile]: http://oprofile.sourceforge.net
